// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

using System;
using System.Collections.Generic;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;

namespace Azure.Messaging.WebPubSub.Client
{
    /// <summary>
    /// Web PubSub Group operations
    /// </summary>
    public class WebPubSubGroup
    {
        private readonly WebPubSubClient _client;
        private readonly bool _autoJoinGroup;

        private volatile bool _isJoined;

        internal WebPubSubGroup(string name, WebPubSubClient client, bool autoJoinGroup)
        {
            Name = name;
            _client = client ?? throw new ArgumentNullException(nameof(client));
            _autoJoinGroup = autoJoinGroup;
        }

        /// <summary>
        /// The name of group
        /// </summary>
        public string Name { get; }

        /// <summary>
        /// A event triggered when received messages from group
        /// </summary>
        public event SyncAsyncEventHandler<GroupMessageEventArgs> MessageReceived;

        /// <summary>
        /// Join the target group.
        /// </summary>
        /// <param name="ackId">An optional ack id. It's generated by SDK if not assigned.</param>
        /// <param name="cancellationToken">An optional <see cref="CancellationToken" /> instance to signal the request to cancel the operation.</param>
        /// <returns>The ack for the operation.</returns>
        public virtual Task<AckMessage> JoinAsync(ulong? ackId = null, CancellationToken cancellationToken = default)
        {
            _isJoined = true;
            return JoinCoreAsync(ackId, cancellationToken);
        }

        /// <summary>
        /// Leave the target group.
        /// </summary>
        /// /// <param name="ackId">An optional ack id. It's generated by SDK if not assigned.</param>
        /// <param name="cancellationToken">An optional <see cref="CancellationToken" /> instance to signal the request to cancel the operation.</param>
        /// <returns>The ack for the operation</returns>
        public virtual Task<AckMessage> LeaveAsync(ulong? ackId = null, CancellationToken cancellationToken = default)
        {
            _isJoined = false;
            return LeaveCoreAsync(ackId, cancellationToken);
        }

        /// <summary>
        /// Publish data to group and wait for the ack.
        /// </summary>
        /// <param name="content">The data content.</param>
        /// <param name="dataType">The data type.</param>
        /// <param name="optionsBuilder">A set of options used while sending to group.</param>
        /// <param name="ackId">The ack-id for the operation. The message with the same ack-id is treated as the same message. Leave it omitted to generate by library.</param>
        /// <param name="cancellationToken">An optional <see cref="CancellationToken" /> instance to signal the request to cancel the operation.</param>
        /// <returns>The ack for the operation</returns>
        public virtual async Task<AckMessage> SendAsync(BinaryData content, WebPubSubDataType dataType, ulong? ackId = null, Action<SendToGroupOptions> optionsBuilder = null, CancellationToken cancellationToken = default)
        {
            var options = BuildDefaultSendToGroupOptions();
            if (optionsBuilder != null)
            {
                optionsBuilder(options);
            }

            if (options.FireAndForget)
            {
                var message = new SendToGroupMessage(Name, content, dataType, null, options.NoEcho);
                await _client.SendMessageAsync(message, cancellationToken).ConfigureAwait(false);
                return null;
            }

            return await _client.SendMessageWithAckIdAsync(id =>
            {
                return new SendToGroupMessage(Name, content, dataType, id, options.NoEcho);
            }, ackId, cancellationToken).ConfigureAwait(false);
        }

        internal async Task InitializeAsync(CancellationToken cancellationToken)
        {
            if (_autoJoinGroup && _isJoined)
            {
                var maxRetry = 3;
                var currentRetry = 0;
                while (cancellationToken.IsCancellationRequested)
                {
                    try
                    {
                        await JoinCoreAsync(cancellationToken: cancellationToken).ConfigureAwait(false);
                        return;
                    }
                    catch
                    {
                        if (currentRetry >= maxRetry)
                        {
                            throw;
                        }
                        currentRetry++;
                    }
                }
            }
        }

        internal async Task HandleMessageAsync(GroupResponseMessage message, CancellationToken token)
        {
            try
            {
                await MessageReceived.RaiseAsync(new GroupMessageEventArgs(message, false, token), nameof(GroupResponseMessage), nameof(MessageReceived)).ConfigureAwait(false);
            }
            catch
            {
            }
        }

        private async Task<AckMessage> JoinCoreAsync(ulong? ackId = null, CancellationToken cancellationToken = default)
        {
            return await _client.SendMessageWithAckIdAsync(id =>
            {
                return new JoinGroupMessage(Name, id);
            }, ackId, cancellationToken).ConfigureAwait(false);
        }

        private async Task<AckMessage> LeaveCoreAsync(ulong? ackId = null, CancellationToken cancellationToken = default)
        {
            return await _client.SendMessageWithAckIdAsync(id =>
            {
                return new LeaveGroupMessage(Name, id);
            }, ackId, cancellationToken).ConfigureAwait(false);
        }

        private static SendToGroupOptions BuildDefaultSendToGroupOptions()
        {
            return new SendToGroupOptions
            {
                NoEcho = false,
                FireAndForget = false,
            };
        }
    }
}
